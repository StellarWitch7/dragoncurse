plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
	id 'me.fallenbreath.yamlang' version '1.3.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		url "https://maven.enjarai.dev/releases"
	}
	maven {
		url "https://maven.enjarai.dev/mirrors"
	}

	maven {
		name "Terraformers Maven"
		url 'https://maven.terraformersmc.com'
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"dragoncurse" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${property('deps.minecraft')}"
	mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.floader')}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"

	modImplementation "dev.enjarai:trickster:${property('deps.trickster')}"

	modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = "assets/the-dragon-curse/lang"
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "Dragoncurse ${property('mod_version')} for Trickster ${property('deps.trickster')}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('publish_target_min')
	def max = property('publish_target_max')

	if (providers.gradleProperty('modrinthToken').present) {
		modrinth {
			projectId = property('mod_modrinth')
			accessToken = providers.gradleProperty('modrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "trickster"
			}
		}
	}

	if (providers.gradleProperty('githubToken').present) {
		github {
			repository = property('mod_github')
			accessToken = providers.gradleProperty('githubToken').get()

			commitish = property('git_branch')
			tagName = project.version
		}
	}
}

tasks.register('publishAll') {
	group 'publishing'
	dependsOn 'publish'
	dependsOn 'publishMods'
}
